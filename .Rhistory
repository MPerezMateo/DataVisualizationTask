h3("Primary Content"),
#p("Plots, data tables, etc. would go here"),
textOutput("Region"),
leafletOutput("map")
)
)
)
# Define content for the second page
page_two <- tabPanel(
"Specific crimes", # label for the tab in the navbar
titlePanel("Specific crimes"), # show with a displayed title
# ...more content would go here...
)
# Define content for the third page
page_three <- tabPanel(
"Third Page" # label for the tab in the navbar
# ...more content would go here...
)
# Pass each page to a multi-page layout (`navbarPage`)
ui <- navbarPage(
"Crimes in Denmark", # application title
page_one,         # include the first page content
page_two,         # include the second page content
page_three        # include the third page content
)
shinyApp(ui = ui, server = my_server)
my_server <- function(input, output) {
# Define content to be displayed by the `message` reactive output
# `renderText()` is passed a reactive expression
#my_range <- reactive({
#  cbind(input$Year[1],input$Year[2])
#})
#output$Range <- renderText({my_range()})
my_legend <- reactive({
if(length(input$icons) ==0) FALSE
else  'legend' %in% input$icons
})
my_strmap <- reactive({
if(length(input$icons) ==0) FALSE
else  'strmap' %in% input$icons
})
output$icons<-  renderText({paste(input$icons, collapse = ", ")})
output$Region <- renderText({input$Region})
output$map <- renderLeaflet({
municipalityDK(input$Year[1],
"REGION",subplot =input$Region, data = total_crimes,legend = my_legend(),map = my_strmap())
})
}
page_one <- tabPanel(
"Overall Crime by regions", # label for the tab in the navbar
titlePanel("Overall Crime by regions"), # show with a displayed title
# This content uses a sidebar layout
sidebarLayout(
sidebarPanel(
selectInput("Region","Select the desired region to isolate",c(regions,"All")),
sliderInput("Year","Select the desired range of years",min=2008,max=2019.75,value=c(2008,2019.75),step=0.25,textOutput("DualSlider")),
checkboxGroupInput("icons", "Choose options:",
choiceNames =
list(tags$span(icon("map"),(" Street-like Map")),
tags$span(icon("sign"),(" Legend"))),
#tags$span(icon("clipboard-list"),(" One or two regions"))),
# A optional bool for single year would be cool
choiceValues =
list("strmap", "legend")# ,"oneortwo")
),
),
mainPanel(
h3("Primary Content"),
#p("Plots, data tables, etc. would go here"),
textOutput("Region"),
leafletOutput("map")
)
)
)
# Define content for the second page
page_two <- tabPanel(
"Specific crimes", # label for the tab in the navbar
titlePanel("Specific crimes"), # show with a displayed title
# ...more content would go here...
)
# Define content for the third page
page_three <- tabPanel(
"Third Page" # label for the tab in the navbar
# ...more content would go here...
)
# Pass each page to a multi-page layout (`navbarPage`)
ui <- navbarPage(
"Crimes in Denmark", # application title
page_one,         # include the first page content
page_two,         # include the second page content
page_three        # include the third page content
)
shinyApp(ui = ui, server = my_server)
my_server <- function(input, output) {
# Define content to be displayed by the `message` reactive output
# `renderText()` is passed a reactive expression
#my_range <- reactive({
#  cbind(input$Year[1],input$Year[2])
#})
#output$Range <- renderText({my_range()})
my_legend <- reactive({
if(length(input$icons) ==0) FALSE
else  'legend' %in% input$icons
})
my_strmap <- reactive({
if(length(input$icons) ==0) FALSE
else  'strmap' %in% input$icons
})
output$icons<-  renderText({paste(input$icons, collapse = ", ")})
output$Region <- renderText({input$Region})
output$map <- renderLeaflet({
municipalityDK(paste0(input$Year[1]),
"REGION",subplot =input$Region, data = total_crimes,legend = my_legend(),map = my_strmap())
})
}
page_one <- tabPanel(
"Overall Crime by regions", # label for the tab in the navbar
titlePanel("Overall Crime by regions"), # show with a displayed title
# This content uses a sidebar layout
sidebarLayout(
sidebarPanel(
selectInput("Region","Select the desired region to isolate",c(regions,"All")),
sliderInput("Year","Select the desired range of years",min=2008,max=2019.75,value=c(2008,2019.75),step=0.25,textOutput("DualSlider")),
checkboxGroupInput("icons", "Choose options:",
choiceNames =
list(tags$span(icon("map"),(" Street-like Map")),
tags$span(icon("sign"),(" Legend"))),
#tags$span(icon("clipboard-list"),(" One or two regions"))),
# A optional bool for single year would be cool
choiceValues =
list("strmap", "legend")# ,"oneortwo")
),
),
mainPanel(
h3("Primary Content"),
#p("Plots, data tables, etc. would go here"),
textOutput("Region"),
leafletOutput("map")
)
)
)
# Define content for the second page
page_two <- tabPanel(
"Specific crimes", # label for the tab in the navbar
titlePanel("Specific crimes"), # show with a displayed title
# ...more content would go here...
)
# Define content for the third page
page_three <- tabPanel(
"Third Page" # label for the tab in the navbar
# ...more content would go here...
)
# Pass each page to a multi-page layout (`navbarPage`)
ui <- navbarPage(
"Crimes in Denmark", # application title
page_one,         # include the first page content
page_two,         # include the second page content
page_three        # include the third page content
)
shinyApp(ui = ui, server = my_server)
my_server <- function(input, output) {
# Define content to be displayed by the `message` reactive output
# `renderText()` is passed a reactive expression
#my_range <- reactive({
#  cbind(input$Year[1],input$Year[2])
#})
#output$Range <- renderText({my_range()})
my_legend <- reactive({
if(length(input$icons) ==0) FALSE
else  'legend' %in% input$icons
})
my_strmap <- reactive({
if(length(input$icons) ==0) FALSE
else  'strmap' %in% input$icons
})
output$icons<-  renderText({paste(input$icons, collapse = ", ")})
output$Region <- renderText({input$Region})
output$map <- renderLeaflet({
municipalityDK(select(data,input$Year[1]),
"REGION",subplot =input$Region, data = total_crimes,legend = my_legend(),map = my_strmap())
})
}
page_one <- tabPanel(
"Overall Crime by regions", # label for the tab in the navbar
titlePanel("Overall Crime by regions"), # show with a displayed title
# This content uses a sidebar layout
sidebarLayout(
sidebarPanel(
selectInput("Region","Select the desired region to isolate",c(regions,"All")),
sliderInput("Year","Select the desired range of years",min=2008,max=2019.75,value=c(2008,2019.75),step=0.25,textOutput("DualSlider")),
checkboxGroupInput("icons", "Choose options:",
choiceNames =
list(tags$span(icon("map"),(" Street-like Map")),
tags$span(icon("sign"),(" Legend"))),
#tags$span(icon("clipboard-list"),(" One or two regions"))),
# A optional bool for single year would be cool
choiceValues =
list("strmap", "legend")# ,"oneortwo")
),
),
mainPanel(
h3("Primary Content"),
#p("Plots, data tables, etc. would go here"),
textOutput("Region"),
leafletOutput("map")
)
)
)
# Define content for the second page
page_two <- tabPanel(
"Specific crimes", # label for the tab in the navbar
titlePanel("Specific crimes"), # show with a displayed title
# ...more content would go here...
)
# Define content for the third page
page_three <- tabPanel(
"Third Page" # label for the tab in the navbar
# ...more content would go here...
)
# Pass each page to a multi-page layout (`navbarPage`)
ui <- navbarPage(
"Crimes in Denmark", # application title
page_one,         # include the first page content
page_two,         # include the second page content
page_three        # include the third page content
)
shinyApp(ui = ui, server = my_server)
my_server <- function(input, output) {
# Define content to be displayed by the `message` reactive output
# `renderText()` is passed a reactive expression
#my_range <- reactive({
#  cbind(input$Year[1],input$Year[2])
#})
#output$Range <- renderText({my_range()})
my_legend <- reactive({
if(length(input$icons) ==0) FALSE
else  'legend' %in% input$icons
})
my_strmap <- reactive({
if(length(input$icons) ==0) FALSE
else  'strmap' %in% input$icons
})
output$icons<-  renderText({paste(input$icons, collapse = ", ")})
output$Region <- renderText({input$Region})
output$map <- renderLeaflet({
municipalityDK(dplyr::select(data,input$Year[1]),
"REGION",subplot =input$Region, data = total_crimes,legend = my_legend(),map = my_strmap())
})
}
page_one <- tabPanel(
"Overall Crime by regions", # label for the tab in the navbar
titlePanel("Overall Crime by regions"), # show with a displayed title
# This content uses a sidebar layout
sidebarLayout(
sidebarPanel(
selectInput("Region","Select the desired region to isolate",c(regions,"All")),
sliderInput("Year","Select the desired range of years",min=2008,max=2019.75,value=c(2008,2019.75),step=0.25,textOutput("DualSlider")),
checkboxGroupInput("icons", "Choose options:",
choiceNames =
list(tags$span(icon("map"),(" Street-like Map")),
tags$span(icon("sign"),(" Legend"))),
#tags$span(icon("clipboard-list"),(" One or two regions"))),
# A optional bool for single year would be cool
choiceValues =
list("strmap", "legend")# ,"oneortwo")
),
),
mainPanel(
h3("Primary Content"),
#p("Plots, data tables, etc. would go here"),
textOutput("Region"),
leafletOutput("map")
)
)
)
# Define content for the second page
page_two <- tabPanel(
"Specific crimes", # label for the tab in the navbar
titlePanel("Specific crimes"), # show with a displayed title
# ...more content would go here...
)
# Define content for the third page
page_three <- tabPanel(
"Third Page" # label for the tab in the navbar
# ...more content would go here...
)
# Pass each page to a multi-page layout (`navbarPage`)
ui <- navbarPage(
"Crimes in Denmark", # application title
page_one,         # include the first page content
page_two,         # include the second page content
page_three        # include the third page content
)
shinyApp(ui = ui, server = my_server)
my_server <- function(input, output) {
# Define content to be displayed by the `message` reactive output
# `renderText()` is passed a reactive expression
#my_range <- reactive({
#  cbind(input$Year[1],input$Year[2])
#})
#output$Range <- renderText({my_range()})
my_legend <- reactive({
if(length(input$icons) ==0) FALSE
else  'legend' %in% input$icons
})
my_strmap <- reactive({
if(length(input$icons) ==0) FALSE
else  'strmap' %in% input$icons
})
output$icons<-  renderText({paste(input$icons, collapse = ", ")})
output$Region <- renderText({input$Region})
output$map <- renderLeaflet({
municipalityDK(dplyr::select(data,paste0(input$Year[1])),
"REGION",subplot =input$Region, data = total_crimes,legend = my_legend(),map = my_strmap())
})
}
page_one <- tabPanel(
"Overall Crime by regions", # label for the tab in the navbar
titlePanel("Overall Crime by regions"), # show with a displayed title
# This content uses a sidebar layout
sidebarLayout(
sidebarPanel(
selectInput("Region","Select the desired region to isolate",c(regions,"All")),
sliderInput("Year","Select the desired range of years",min=2008,max=2019.75,value=c(2008,2019.75),step=0.25,textOutput("DualSlider")),
checkboxGroupInput("icons", "Choose options:",
choiceNames =
list(tags$span(icon("map"),(" Street-like Map")),
tags$span(icon("sign"),(" Legend"))),
#tags$span(icon("clipboard-list"),(" One or two regions"))),
# A optional bool for single year would be cool
choiceValues =
list("strmap", "legend")# ,"oneortwo")
),
),
mainPanel(
h3("Primary Content"),
#p("Plots, data tables, etc. would go here"),
textOutput("Region"),
leafletOutput("map")
)
)
)
# Define content for the second page
page_two <- tabPanel(
"Specific crimes", # label for the tab in the navbar
titlePanel("Specific crimes"), # show with a displayed title
# ...more content would go here...
)
# Define content for the third page
page_three <- tabPanel(
"Third Page" # label for the tab in the navbar
# ...more content would go here...
)
# Pass each page to a multi-page layout (`navbarPage`)
ui <- navbarPage(
"Crimes in Denmark", # application title
page_one,         # include the first page content
page_two,         # include the second page content
page_three        # include the third page content
)
shinyApp(ui = ui, server = my_server)
select(total_crimes,"2007")
dplyr::select(total_crimes,"2007")
paste0(2007.25)
dplyr::select(total_crimes,paste0(2007.25))
my_server <- function(input, output) {
# Define content to be displayed by the `message` reactive output
# `renderText()` is passed a reactive expression
#my_range <- reactive({
#  cbind(input$Year[1],input$Year[2])
#})
#output$Range <- renderText({my_range()})
my_legend <- reactive({
if(length(input$icons) ==0) FALSE
else  'legend' %in% input$icons
})
my_strmap <- reactive({
if(length(input$icons) ==0) FALSE
else  'strmap' %in% input$icons
})
output$icons<-  renderText({paste(input$icons, collapse = ", ")})
output$Region <- renderText({input$Region})
output$map <- renderLeaflet({
municipalityDK(dplyr::select(data,paste0(input$Year[1])),
"REGION",subplot =input$Region, data = total_crimes,legend = my_legend(),map = my_strmap())
})
}
page_one <- tabPanel(
"Overall Crime by regions", # label for the tab in the navbar
titlePanel("Overall Crime by regions"), # show with a displayed title
# This content uses a sidebar layout
sidebarLayout(
sidebarPanel(
selectInput("Region","Select the desired region to isolate",c(regions,"All")),
sliderInput("Year","Select the desired range of years",min=2008,max=2019.75,value=c(2008,2019.75),step=0.25,textOutput("DualSlider")),
checkboxGroupInput("icons", "Choose options:",
choiceNames =
list(tags$span(icon("map"),(" Street-like Map")),
tags$span(icon("sign"),(" Legend"))),
#tags$span(icon("clipboard-list"),(" One or two regions"))),
# A optional bool for single year would be cool
choiceValues =
list("strmap", "legend")# ,"oneortwo")
),
),
mainPanel(
h3("Primary Content"),
#p("Plots, data tables, etc. would go here"),
textOutput("Region"),
leafletOutput("map")
)
)
)
# Define content for the second page
page_two <- tabPanel(
"Specific crimes", # label for the tab in the navbar
titlePanel("Specific crimes"), # show with a displayed title
# ...more content would go here...
)
# Define content for the third page
page_three <- tabPanel(
"Third Page" # label for the tab in the navbar
# ...more content would go here...
)
# Pass each page to a multi-page layout (`navbarPage`)
ui <- navbarPage(
"Crimes in Denmark", # application title
page_one,         # include the first page content
page_two,         # include the second page content
page_three        # include the third page content
)
shinyApp(ui = ui, server = my_server)
my_server <- function(input, output) {
# Define content to be displayed by the `message` reactive output
# `renderText()` is passed a reactive expression
#my_range <- reactive({
#  cbind(input$Year[1],input$Year[2])
#})
#output$Range <- renderText({my_range()})
my_legend <- reactive({
if(length(input$icons) ==0) FALSE
else  'legend' %in% input$icons
})
my_strmap <- reactive({
if(length(input$icons) ==0) FALSE
else  'strmap' %in% input$icons
})
output$icons<-  renderText({paste(input$icons, collapse = ", ")})
output$Region <- renderText({input$Region})
output$map <- renderLeaflet({
municipalityDK(paste0(input$Year[1]),
"REGION",subplot =input$Region, data = total_crimes,legend = my_legend(),map = my_strmap())
})
}
page_one <- tabPanel(
"Overall Crime by regions", # label for the tab in the navbar
titlePanel("Overall Crime by regions"), # show with a displayed title
# This content uses a sidebar layout
sidebarLayout(
sidebarPanel(
selectInput("Region","Select the desired region to isolate",c(regions,"All")),
sliderInput("Year","Select the desired range of years",min=2008,max=2019.75,value=c(2008,2019.75),step=0.25,textOutput("DualSlider")),
checkboxGroupInput("icons", "Choose options:",
choiceNames =
list(tags$span(icon("map"),(" Street-like Map")),
tags$span(icon("sign"),(" Legend"))),
#tags$span(icon("clipboard-list"),(" One or two regions"))),
# A optional bool for single year would be cool
choiceValues =
list("strmap", "legend")# ,"oneortwo")
),
),
mainPanel(
h3("Primary Content"),
#p("Plots, data tables, etc. would go here"),
textOutput("Region"),
leafletOutput("map")
)
)
)
# Define content for the second page
page_two <- tabPanel(
"Specific crimes", # label for the tab in the navbar
titlePanel("Specific crimes"), # show with a displayed title
# ...more content would go here...
)
# Define content for the third page
page_three <- tabPanel(
"Third Page" # label for the tab in the navbar
# ...more content would go here...
)
# Pass each page to a multi-page layout (`navbarPage`)
ui <- navbarPage(
"Crimes in Denmark", # application title
page_one,         # include the first page content
page_two,         # include the second page content
page_three        # include the third page content
)
shinyApp(ui = ui, server = my_server)
getIDs("municipal")
b<-getIDs("municipal")
b<-getIDs("regional")
b<-getIDs("constituency")
b
b<-getIDs("regional")
regions
b<-getIDs("municipal")
b
total_crimes<- data %>%
dplyr::filter(TYPE.OF.OFFENCE =="Penal Code, total" )
View(population)
View(population)
